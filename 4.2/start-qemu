#!/bin/bash
#####set -e
set -vx
# main available options:
#   QEMU_CPU=n    (cores)
#   QEMU_RAM=nnn  (megabytes)
#   QEMU_HDA      (filename)
#   QEMU_HDA_SIZE (bytes, suffixes like "G" allowed)
#   QEMU_CDROM    (filename)
#   QEMU_BOOT     (-boot)
#   QEMU_PORTS="xxx[ xxx ...]" (space separated port numbers)
#   QEMU_NET_USER_EXTRA="net=192.168.76.0/24,dhcpstart=192.168.76.9" (extra raw args for "-net user,...")
#   QEMU_ARCH=ppc64 (override automatic hostArchitectur "uname -m" )
#   QEMU_BIN=qemu-system-hppa (override automatic set of qemu binary "qemu-system-$qemuArch" )
#   QEMU_NO_SSH=1 (suppress automatic port 22 forwarding)
#   QEMU_NO_SERIAL=1 (suppress automatic "-serial stdio")
#   QEMU_NO_VNC=1 (suppress automatic "-vnc ':0'")
#   QEMU_NO_KVM=1 (suppress check for KVM and "-enable-kvm")
#   QEMU_NO_CPU=1 (suppress automatic "-smp "${QEMU_CPU:-1}")
#   QEMU_NO_RAM=1 (suppress automatic "-m "${QEMU_RAM:-512}")
#   QEMU_NO_HDA_CREATE=1
#   QEMU_NO_HDA=1 (suppress automatic "qemuScsiDevice='virtio-scsi-pci', -drive file="$QEMU_HDA",index=0,media=disk,discard=unmap,detect-zeroes=unmap,if=none,id=hda, -device scsi-hd,drive=hda" )
#   QEMU_NO_CDROM=1
#   QEMU_NO_BOOT=1
#   QEMU_NO_NET_USER=1  (suppress automatic network creation will implizit also disabel QEMU_NET_USER_EXTRA)
#   QEMU_ARGS_EXTRA="-m 192 -M 40p -bios q40pofw-serial.rom -serial telnet::4441,server -hda aix-hdd.qcow2 -cdrom ./cd.iso -net nic -net tap -vga none -nographic" (extra raw args for qemu)
#   e.g. QEMU_BIN=qemu-system-ppc, QEMU_ARGS_EXTRA="-m 192 -M 40p -bios q40pofw-serial.rom -serial telnet::4441,server -hda aix-hdd.qcow2 -cdrom ./cd.iso -net nic -net tap -vga none -nographic"

hostArch="$(uname -m)"
qemuArch="${QEMU_ARCH:-$hostArch}"
qemu="${QEMU_BIN:-qemu-system-$qemuArch}"
qemuArgs=()
base64enc () { echo "$@" | base64 --wrap=0 - ;}
base64dec () { echo "$@" | base64 -d - ;}
qemuArgsEXTRA="${QEMU_ARGS_EXTRA:-}"
qemuArgsEXTRAunBASE64=$(base64dec "${QEMU_ARGS_EXTRA_B64:-}")
#qemuArgsEXTRA_B64="${qemuArgsEXTRAunBASE64:-}"
qemuArgsEXTRAunBASE64="${qemuArgsEXTRAunBASE64:-}"

qemuPorts=()
if [ -z "${QEMU_NO_SSH:-}" ]; then
	qemuPorts+=( 22 )
fi
#qemuPorts+=( ${QEMU_PORTS:-} )
qemuPorts+=( "${QEMU_PORTS:-}" )

if [ -z "${QEMU_NO_KVM:-}" ]; then
if [ -e /dev/kvm ]; then
	qemuArgs+=( -enable-kvm )
elif [ "$hostArch" = "$qemuArch" ]; then
	echo >&2
	echo >&2 'warning: /dev/kvm not found'
	echo >&2 '  PERFORMANCE WILL SUFFER'
	echo >&2 '  (hint: docker run --device /dev/kvm ...)'
	echo >&2
	sleep 3
fi
fi


if [ -z "${QEMU_NO_CPU:-}" ]; then
qemuArgs+=( -smp "${QEMU_CPU:-1}" )
fi
if [ -z "${QEMU_NO_RAM:-}" ]; then
qemuArgs+=( -m "${QEMU_RAM:-512}" )
fi

if [ -z "${QEMU_NO_HDA:-}" ]; then
if [ -n "${QEMU_HDA:-}" ]; then
        if [ -z "${QEMU_NO_HDA_CREATE:-}" ]; then
	if [ ! -f "$QEMU_HDA" -o ! -s "$QEMU_HDA" ]; then
		(
			set -x
			qemu-img create -f qcow2 -o preallocation=off "$QEMU_HDA" "${QEMU_HDA_SIZE:-8G}"
		)
	fi
	fi

	# http://wiki.qemu.org/download/qemu-doc.html#Invocation
	qemuScsiDevice='virtio-scsi-pci'
	case "$qemuArch" in
		arm) qemuScsiDevice='virtio-scsi-device' ;;
	esac

	#qemuArgs+=( -hda "$QEMU_HDA" )
	#qemuArgs+=( -drive file="$QEMU_HDA",index=0,media=disk,discard=unmap )
	qemuArgs+=(
		-drive file="$QEMU_HDA",index=0,media=disk,discard=unmap,detect-zeroes=unmap,if=none,id=hda
		-device "$qemuScsiDevice"
		-device scsi-hd,drive=hda
	)
fi
fi

if [ -z "${QEMU_NO_CDROM:-}" ]; then
if [ -n "${QEMU_CDROM:-}" ]; then
	qemuArgs+=( -cdrom "$QEMU_CDROM" )
fi
fi

if [ -z "${QEMU_NO_BOOT:-}" ]; then
if [ -n "${QEMU_BOOT:-}" ]; then
	qemuArgs+=( -boot "$QEMU_BOOT" )
fi
fi

if [ -z "${QEMU_NO_NET_USER:-}" ]; then
netArg='user'
netArg+=",hostname=$(hostname)"
if [ -n "${QEMU_NET_USER_EXTRA:-}" ]; then
	netArg+=",$QEMU_NET_USER_EXTRA"
fi
for port in "${qemuPorts[@]}"; do
	netArg+=",hostfwd=tcp::$port-:$port"
	netArg+=",hostfwd=udp::$port-:$port"
done

qemuNetDevice='virtio-net-pci'
case "$qemuArch" in
	arm) qemuNetDevice='virtio-net-device' ;;
esac

qemuArgs+=(
	-netdev "$netArg,id=net"
	-device "$qemuNetDevice,netdev=net"
)
fi

if [ -z "${QEMU_NO_SERIAL:-}" ]; then
	qemuArgs+=(
		-serial stdio
	)
fi

if [ -z "${QEMU_NO_VNC:-}" ]; then
	qemuArgs+=(
		-vnc ':0'
	)
fi

if [ -n "${qemuArgsEXTRA:-}" ]; then
	qemuArgs+=(
		"${qemuArgsEXTRA}"
	)
fi

if [ -n "${qemuArgsEXTRAunBASE64:-}" ]; then
        qemuArgs+=(
                "${qemuArgsEXTRAunBASE64}"
        )
fi

qemuArgs+=( "$@" )

set -vx
#exec "${qemu}" "${qemuArgs[@]}" || true

#CMDstr="${qemu}" "${qemuArgs[@]}"

#eval CMDstrDEBUG="${CMDstrDEBUG[@]}"
CMDstrDEBUG="${CMDstrDEBUG[@]}"
echo "${CMDstrDEBUG}"
eval exec "${CMDstrDEBUG}"


CMDstrDEBUGunBASE64=$(base64dec "${CMDstrDEBUG_B64:-}")
CMDstrDEBUGunBASE64="${CMDstrDEBUGunBASE64:-}"

#CMDstrDEBUGunBASE64="${CMDstrDEBUGunBASE64[@]}"
CMDstrDEBUGunBASE64="${CMDstrDEBUGunBASE64[*]}"
echo "${CMDstrDEBUGunBASE64}"
eval exec "${CMDstrDEBUGunBASE64}"

#CMDstr="${qemu} ${qemuArgs[@]}"
CMDstr="${qemu} ${qemuArgs[*]}"
echo "${CMDstr}"
eval exec "${CMDstr}"

